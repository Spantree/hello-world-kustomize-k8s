### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateCounter {
  _avg: CounterAvgAggregateOutputType
  _count: CounterCountAggregateOutputType
  _max: CounterMaxAggregateOutputType
  _min: CounterMinAggregateOutputType
  _sum: CounterSumAggregateOutputType
  avg: CounterAvgAggregateOutputType
  count: CounterCountAggregateOutputType
  max: CounterMaxAggregateOutputType
  min: CounterMinAggregateOutputType
  sum: CounterSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BigIntFieldUpdateOperationsInput {
  decrement: BigInt
  divide: BigInt
  increment: BigInt
  multiply: BigInt
  set: BigInt
}

input BigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt]
}

input BigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  avg: NestedFloatFilter
  count: NestedIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt]
  lt: BigInt
  lte: BigInt
  max: NestedBigIntFilter
  min: NestedBigIntFilter
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt]
  sum: NestedBigIntFilter
}

type Counter {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
  value: BigInt!
}

type CounterAvgAggregateOutputType {
  value: Float
}

type CounterCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  value: Int!
}

input CounterCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  value: BigInt
}

type CounterMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
  value: BigInt
}

type CounterMinAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
  value: BigInt
}

input CounterOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

enum CounterScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
  value
}

input CounterScalarWhereWithAggregatesInput {
  AND: [CounterScalarWhereWithAggregatesInput]
  NOT: [CounterScalarWhereWithAggregatesInput]
  OR: [CounterScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  value: BigIntWithAggregatesFilter
}

type CounterSumAggregateOutputType {
  value: BigInt
}

input CounterUncheckedCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  value: BigInt
}

input CounterUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: BigIntFieldUpdateOperationsInput
}

input CounterUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: BigIntFieldUpdateOperationsInput
}

input CounterUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: BigIntFieldUpdateOperationsInput
}

input CounterUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: BigIntFieldUpdateOperationsInput
}

input CounterWhereInput {
  AND: [CounterWhereInput]
  NOT: [CounterWhereInput]
  OR: [CounterWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  value: BigIntFilter
}

input CounterWhereUniqueInput {
  id: String
  name: String
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

"""Json custom scalar type"""
scalar Json

type Mutation {
  createCounter(data: CounterCreateInput!): Counter!
  incrementCounter(id: String!): Counter
}

input NestedBigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt]
}

input NestedBigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  avg: NestedFloatFilter
  count: NestedIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt]
  lt: BigInt
  lte: BigInt
  max: NestedBigIntFilter
  min: NestedBigIntFilter
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt]
  sum: NestedBigIntFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type Query {
  aggregateCounter(cursor: CounterWhereUniqueInput, distinct: CounterScalarFieldEnum, orderBy: [CounterOrderByInput], skip: Int, take: Int, where: CounterWhereInput): AggregateCounter
  counter(where: CounterWhereUniqueInput!): Counter
  counterCount(cursor: CounterWhereUniqueInput, distinct: CounterScalarFieldEnum, orderBy: [CounterOrderByInput], skip: Int, take: Int, where: CounterWhereInput): Int!
  counters(cursor: CounterWhereUniqueInput, distinct: CounterScalarFieldEnum, orderBy: [CounterOrderByInput], skip: Int, take: Int, where: CounterWhereInput): [Counter!]!
  firstCounter(cursor: CounterWhereUniqueInput, distinct: CounterScalarFieldEnum, orderBy: [CounterOrderByInput], skip: Int, take: Int, where: CounterWhereInput): Counter
  systemInfo: SystemInfo
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type SystemInfo {
  databaseType: String
  env: Json
  greeting: String
}
